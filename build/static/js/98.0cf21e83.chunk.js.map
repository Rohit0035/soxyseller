{"version":3,"sources":["../node_modules/prismjs/plugins/line-numbers/prism-line-numbers.js","../node_modules/prismjs/plugins/line-highlight/prism-line-highlight.js","views/ui-elements/syntax-highlighter/BasicUsage.js","views/ui-elements/syntax-highlighter/Examples.js","views/ui-elements/syntax-highlighter/LineNumbers.js","views/ui-elements/syntax-highlighter/LineHightlight.js","views/ui-elements/syntax-highlighter/SyntaxHighlighter.js"],"names":["Prism","document","NEW_LINE_EXP","config","plugins","lineNumbers","getLine","element","number","tagName","classList","contains","lineNumberRows","querySelector","lineNumberStart","parseInt","getAttribute","lineNumberEnd","children","length","lineIndex","resize","resizeElements","assumeViewportIndependence","lastWidth","undefined","window","addEventListener","innerWidth","Array","prototype","slice","call","querySelectorAll","hooks","add","env","code","pre","parentNode","test","nodeName","util","isActive","remove","lineNumbersWrapper","match","linesNum","lines","join","createElement","setAttribute","className","innerHTML","hasAttribute","style","counterReset","appendChild","run","elements","filter","e","whiteSpace","getComputedStyle","currentStyle","getStyles","infos","map","codeElement","lineNumberSizer","codeLines","textContent","split","display","oneLinerHeight","getBoundingClientRect","height","lineHeights","sizer","Boolean","forEach","info","line","index","childIndex","i","wrapper","lineNumber","isLineHeightRounded","res","d","fontSize","lineHeight","padding","border","body","offsetHeight","removeChild","scrollIntoView","fakeTimer","parentElement","isActiveFor","num","$$","completeHook","clearTimeout","hasLineNumbers","isLineNumbersLoaded","hasClass","highlightLines","mutateDom","setTimeout","applyHash","callFunction","selector","container","func","id","classes","ranges","replace","offset","parseFloat","mutateActions","codePreOffset","parent","child","parentStyle","childStyle","pxToNumber","px","substr","offsetTop","borderTopWidth","paddingTop","getContentBoxTopOffset","currentRange","range","start","end","push","startNode","endNode","top","String","lineSpan","onclick","hash","location","getElementById","lastIndexOf","BasicUsage","Card","CardHeader","CardTitle","CardBody","href","target","rel","React","Component","Examples","LineNumber","LineHighlight","data-line","SyntaxHighlighter","highlightAll","Fragment","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Row","Col","sm","LineNumbers"],"mappings":"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","file":"static/js/98.0cf21e83.chunk.js","sourcesContent":["(function () {\n\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined') {\n\t\treturn;\n\t}\n\n\t/**\n\t * Plugin name which is used as a class name for <pre> which is activating the plugin\n\t *\n\t * @type {string}\n\t */\n\tvar PLUGIN_NAME = 'line-numbers';\n\n\t/**\n\t * Regular expression used for determining line breaks\n\t *\n\t * @type {RegExp}\n\t */\n\tvar NEW_LINE_EXP = /\\n(?!$)/g;\n\n\n\t/**\n\t * Global exports\n\t */\n\tvar config = Prism.plugins.lineNumbers = {\n\t\t/**\n\t\t * Get node for provided line number\n\t\t *\n\t\t * @param {Element} element pre element\n\t\t * @param {number} number line number\n\t\t * @returns {Element|undefined}\n\t\t */\n\t\tgetLine: function (element, number) {\n\t\t\tif (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar lineNumberRows = element.querySelector('.line-numbers-rows');\n\t\t\tif (!lineNumberRows) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;\n\t\t\tvar lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);\n\n\t\t\tif (number < lineNumberStart) {\n\t\t\t\tnumber = lineNumberStart;\n\t\t\t}\n\t\t\tif (number > lineNumberEnd) {\n\t\t\t\tnumber = lineNumberEnd;\n\t\t\t}\n\n\t\t\tvar lineIndex = number - lineNumberStart;\n\n\t\t\treturn lineNumberRows.children[lineIndex];\n\t\t},\n\n\t\t/**\n\t\t * Resizes the line numbers of the given element.\n\t\t *\n\t\t * This function will not add line numbers. It will only resize existing ones.\n\t\t *\n\t\t * @param {HTMLElement} element A `<pre>` element with line numbers.\n\t\t * @returns {void}\n\t\t */\n\t\tresize: function (element) {\n\t\t\tresizeElements([element]);\n\t\t},\n\n\t\t/**\n\t\t * Whether the plugin can assume that the units font sizes and margins are not depended on the size of\n\t\t * the current viewport.\n\t\t *\n\t\t * Setting this to `true` will allow the plugin to do certain optimizations for better performance.\n\t\t *\n\t\t * Set this to `false` if you use any of the following CSS units: `vh`, `vw`, `vmin`, `vmax`.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tassumeViewportIndependence: true\n\t};\n\n\t/**\n\t * Resizes the given elements.\n\t *\n\t * @param {HTMLElement[]} elements\n\t */\n\tfunction resizeElements(elements) {\n\t\telements = elements.filter(function (e) {\n\t\t\tvar codeStyles = getStyles(e);\n\t\t\tvar whiteSpace = codeStyles['white-space'];\n\t\t\treturn whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line';\n\t\t});\n\n\t\tif (elements.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar infos = elements.map(function (element) {\n\t\t\tvar codeElement = element.querySelector('code');\n\t\t\tvar lineNumbersWrapper = element.querySelector('.line-numbers-rows');\n\t\t\tif (!codeElement || !lineNumbersWrapper) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t/** @type {HTMLElement} */\n\t\t\tvar lineNumberSizer = element.querySelector('.line-numbers-sizer');\n\t\t\tvar codeLines = codeElement.textContent.split(NEW_LINE_EXP);\n\n\t\t\tif (!lineNumberSizer) {\n\t\t\t\tlineNumberSizer = document.createElement('span');\n\t\t\t\tlineNumberSizer.className = 'line-numbers-sizer';\n\n\t\t\t\tcodeElement.appendChild(lineNumberSizer);\n\t\t\t}\n\n\t\t\tlineNumberSizer.innerHTML = '0';\n\t\t\tlineNumberSizer.style.display = 'block';\n\n\t\t\tvar oneLinerHeight = lineNumberSizer.getBoundingClientRect().height;\n\t\t\tlineNumberSizer.innerHTML = '';\n\n\t\t\treturn {\n\t\t\t\telement: element,\n\t\t\t\tlines: codeLines,\n\t\t\t\tlineHeights: [],\n\t\t\t\toneLinerHeight: oneLinerHeight,\n\t\t\t\tsizer: lineNumberSizer,\n\t\t\t};\n\t\t}).filter(Boolean);\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar lines = info.lines;\n\t\t\tvar lineHeights = info.lineHeights;\n\t\t\tvar oneLinerHeight = info.oneLinerHeight;\n\n\t\t\tlineHeights[lines.length - 1] = undefined;\n\t\t\tlines.forEach(function (line, index) {\n\t\t\t\tif (line && line.length > 1) {\n\t\t\t\t\tvar e = lineNumberSizer.appendChild(document.createElement('span'));\n\t\t\t\t\te.style.display = 'block';\n\t\t\t\t\te.textContent = line;\n\t\t\t\t} else {\n\t\t\t\t\tlineHeights[index] = oneLinerHeight;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar lineHeights = info.lineHeights;\n\n\t\t\tvar childIndex = 0;\n\t\t\tfor (var i = 0; i < lineHeights.length; i++) {\n\t\t\t\tif (lineHeights[i] === undefined) {\n\t\t\t\t\tlineHeights[i] = lineNumberSizer.children[childIndex++].getBoundingClientRect().height;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar wrapper = info.element.querySelector('.line-numbers-rows');\n\n\t\t\tlineNumberSizer.style.display = 'none';\n\t\t\tlineNumberSizer.innerHTML = '';\n\n\t\t\tinfo.lineHeights.forEach(function (height, lineNumber) {\n\t\t\t\twrapper.children[lineNumber].style.height = height + 'px';\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Returns style declarations for the element\n\t *\n\t * @param {Element} element\n\t */\n\tfunction getStyles(element) {\n\t\tif (!element) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn window.getComputedStyle ? getComputedStyle(element) : (element.currentStyle || null);\n\t}\n\n\tvar lastWidth = undefined;\n\twindow.addEventListener('resize', function () {\n\t\tif (config.assumeViewportIndependence && lastWidth === window.innerWidth) {\n\t\t\treturn;\n\t\t}\n\t\tlastWidth = window.innerWidth;\n\n\t\tresizeElements(Array.prototype.slice.call(document.querySelectorAll('pre.' + PLUGIN_NAME)));\n\t});\n\n\tPrism.hooks.add('complete', function (env) {\n\t\tif (!env.code) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar code = /** @type {Element} */ (env.element);\n\t\tvar pre = /** @type {HTMLElement} */ (code.parentNode);\n\n\t\t// works only for <code> wrapped inside <pre> (not inline)\n\t\tif (!pre || !/pre/i.test(pre.nodeName)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Abort if line numbers already exists\n\t\tif (code.querySelector('.line-numbers-rows')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// only add line numbers if <code> or one of its ancestors has the `line-numbers` class\n\t\tif (!Prism.util.isActive(code, PLUGIN_NAME)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove the class 'line-numbers' from the <code>\n\t\tcode.classList.remove(PLUGIN_NAME);\n\t\t// Add the class 'line-numbers' to the <pre>\n\t\tpre.classList.add(PLUGIN_NAME);\n\n\t\tvar match = env.code.match(NEW_LINE_EXP);\n\t\tvar linesNum = match ? match.length + 1 : 1;\n\t\tvar lineNumbersWrapper;\n\n\t\tvar lines = new Array(linesNum + 1).join('<span></span>');\n\n\t\tlineNumbersWrapper = document.createElement('span');\n\t\tlineNumbersWrapper.setAttribute('aria-hidden', 'true');\n\t\tlineNumbersWrapper.className = 'line-numbers-rows';\n\t\tlineNumbersWrapper.innerHTML = lines;\n\n\t\tif (pre.hasAttribute('data-start')) {\n\t\t\tpre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);\n\t\t}\n\n\t\tenv.element.appendChild(lineNumbersWrapper);\n\n\t\tresizeElements([pre]);\n\n\t\tPrism.hooks.run('line-numbers', env);\n\t});\n\n\tPrism.hooks.add('line-numbers', function (env) {\n\t\tenv.plugins = env.plugins || {};\n\t\tenv.plugins.lineNumbers = true;\n\t});\n\n}());\n","(function () {\n\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined' || !document.querySelector) {\n\t\treturn;\n\t}\n\n\tvar LINE_NUMBERS_CLASS = 'line-numbers';\n\tvar LINKABLE_LINE_NUMBERS_CLASS = 'linkable-line-numbers';\n\n\t/**\n\t * @param {string} selector\n\t * @param {ParentNode} [container]\n\t * @returns {HTMLElement[]}\n\t */\n\tfunction $$(selector, container) {\n\t\treturn Array.prototype.slice.call((container || document).querySelectorAll(selector));\n\t}\n\n\t/**\n\t * Returns whether the given element has the given class.\n\t *\n\t * @param {Element} element\n\t * @param {string} className\n\t * @returns {boolean}\n\t */\n\tfunction hasClass(element, className) {\n\t\treturn element.classList.contains(className);\n\t}\n\n\t/**\n\t * Calls the given function.\n\t *\n\t * @param {() => any} func\n\t * @returns {void}\n\t */\n\tfunction callFunction(func) {\n\t\tfunc();\n\t}\n\n\t// Some browsers round the line-height, others don't.\n\t// We need to test for it to position the elements properly.\n\tvar isLineHeightRounded = (function () {\n\t\tvar res;\n\t\treturn function () {\n\t\t\tif (typeof res === 'undefined') {\n\t\t\t\tvar d = document.createElement('div');\n\t\t\t\td.style.fontSize = '13px';\n\t\t\t\td.style.lineHeight = '1.5';\n\t\t\t\td.style.padding = '0';\n\t\t\t\td.style.border = '0';\n\t\t\t\td.innerHTML = '&nbsp;<br />&nbsp;';\n\t\t\t\tdocument.body.appendChild(d);\n\t\t\t\t// Browsers that round the line-height should have offsetHeight === 38\n\t\t\t\t// The others should have 39.\n\t\t\t\tres = d.offsetHeight === 38;\n\t\t\t\tdocument.body.removeChild(d);\n\t\t\t}\n\t\t\treturn res;\n\t\t};\n\t}());\n\n\t/**\n\t * Returns the top offset of the content box of the given parent and the content box of one of its children.\n\t *\n\t * @param {HTMLElement} parent\n\t * @param {HTMLElement} child\n\t */\n\tfunction getContentBoxTopOffset(parent, child) {\n\t\tvar parentStyle = getComputedStyle(parent);\n\t\tvar childStyle = getComputedStyle(child);\n\n\t\t/**\n\t\t * Returns the numeric value of the given pixel value.\n\t\t *\n\t\t * @param {string} px\n\t\t */\n\t\tfunction pxToNumber(px) {\n\t\t\treturn +px.substr(0, px.length - 2);\n\t\t}\n\n\t\treturn child.offsetTop\n\t\t\t+ pxToNumber(childStyle.borderTopWidth)\n\t\t\t+ pxToNumber(childStyle.paddingTop)\n\t\t\t- pxToNumber(parentStyle.paddingTop);\n\t}\n\n\t/**\n\t * Returns whether the Line Highlight plugin is active for the given element.\n\t *\n\t * If this function returns `false`, do not call `highlightLines` for the given element.\n\t *\n\t * @param {HTMLElement | null | undefined} pre\n\t * @returns {boolean}\n\t */\n\tfunction isActiveFor(pre) {\n\t\tif (!pre || !/pre/i.test(pre.nodeName)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (pre.hasAttribute('data-line')) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (pre.id && Prism.util.isActive(pre, LINKABLE_LINE_NUMBERS_CLASS)) {\n\t\t\t// Technically, the line numbers plugin is also necessary but this plugin doesn't control the classes of\n\t\t\t// the line numbers plugin, so we can't assume that they are present.\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tvar scrollIntoView = true;\n\n\t/**\n\t * Highlights the lines of the given pre.\n\t *\n\t * This function is split into a DOM measuring and mutate phase to improve performance.\n\t * The returned function mutates the DOM when called.\n\t *\n\t * @param {HTMLElement} pre\n\t * @param {string | null} [lines]\n\t * @param {string} [classes='']\n\t * @returns {() => void}\n\t */\n\tfunction highlightLines(pre, lines, classes) {\n\t\tlines = typeof lines === 'string' ? lines : (pre.getAttribute('data-line') || '');\n\n\t\tvar ranges = lines.replace(/\\s+/g, '').split(',').filter(Boolean);\n\t\tvar offset = +pre.getAttribute('data-line-offset') || 0;\n\n\t\tvar parseMethod = isLineHeightRounded() ? parseInt : parseFloat;\n\t\tvar lineHeight = parseMethod(getComputedStyle(pre).lineHeight);\n\t\tvar hasLineNumbers = Prism.util.isActive(pre, LINE_NUMBERS_CLASS);\n\t\tvar codeElement = pre.querySelector('code');\n\t\tvar parentElement = hasLineNumbers ? pre : codeElement || pre;\n\t\tvar mutateActions = /** @type {(() => void)[]} */ ([]);\n\n\t\t/**\n\t\t * The top offset between the content box of the <code> element and the content box of the parent element of\n\t\t * the line highlight element (either `<pre>` or `<code>`).\n\t\t *\n\t\t * This offset might not be zero for some themes where the <code> element has a top margin. Some plugins\n\t\t * (or users) might also add element above the <code> element. Because the line highlight is aligned relative\n\t\t * to the <pre> element, we have to take this into account.\n\t\t *\n\t\t * This offset will be 0 if the parent element of the line highlight element is the `<code>` element.\n\t\t */\n\t\tvar codePreOffset = !codeElement || parentElement == codeElement ? 0 : getContentBoxTopOffset(pre, codeElement);\n\n\t\tranges.forEach(function (currentRange) {\n\t\t\tvar range = currentRange.split('-');\n\n\t\t\tvar start = +range[0];\n\t\t\tvar end = +range[1] || start;\n\n\t\t\t/** @type {HTMLElement} */\n\t\t\tvar line = pre.querySelector('.line-highlight[data-range=\"' + currentRange + '\"]') || document.createElement('div');\n\n\t\t\tmutateActions.push(function () {\n\t\t\t\tline.setAttribute('aria-hidden', 'true');\n\t\t\t\tline.setAttribute('data-range', currentRange);\n\t\t\t\tline.className = (classes || '') + ' line-highlight';\n\t\t\t});\n\n\t\t\t// if the line-numbers plugin is enabled, then there is no reason for this plugin to display the line numbers\n\t\t\tif (hasLineNumbers && Prism.plugins.lineNumbers) {\n\t\t\t\tvar startNode = Prism.plugins.lineNumbers.getLine(pre, start);\n\t\t\t\tvar endNode = Prism.plugins.lineNumbers.getLine(pre, end);\n\n\t\t\t\tif (startNode) {\n\t\t\t\t\tvar top = startNode.offsetTop + codePreOffset + 'px';\n\t\t\t\t\tmutateActions.push(function () {\n\t\t\t\t\t\tline.style.top = top;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (endNode) {\n\t\t\t\t\tvar height = (endNode.offsetTop - startNode.offsetTop) + endNode.offsetHeight + 'px';\n\t\t\t\t\tmutateActions.push(function () {\n\t\t\t\t\t\tline.style.height = height;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmutateActions.push(function () {\n\t\t\t\t\tline.setAttribute('data-start', String(start));\n\n\t\t\t\t\tif (end > start) {\n\t\t\t\t\t\tline.setAttribute('data-end', String(end));\n\t\t\t\t\t}\n\n\t\t\t\t\tline.style.top = (start - offset - 1) * lineHeight + codePreOffset + 'px';\n\n\t\t\t\t\tline.textContent = new Array(end - start + 2).join(' \\n');\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tmutateActions.push(function () {\n\t\t\t\t// allow this to play nicely with the line-numbers plugin\n\t\t\t\t// need to attack to pre as when line-numbers is enabled, the code tag is relatively which screws up the positioning\n\t\t\t\tparentElement.appendChild(line);\n\t\t\t});\n\t\t});\n\n\t\tvar id = pre.id;\n\t\tif (hasLineNumbers && Prism.util.isActive(pre, LINKABLE_LINE_NUMBERS_CLASS) && id) {\n\t\t\t// This implements linkable line numbers. Linkable line numbers use Line Highlight to create a link to a\n\t\t\t// specific line. For this to work, the pre element has to:\n\t\t\t//  1) have line numbers,\n\t\t\t//  2) have the `linkable-line-numbers` class or an ascendant that has that class, and\n\t\t\t//  3) have an id.\n\n\t\t\tif (!hasClass(pre, LINKABLE_LINE_NUMBERS_CLASS)) {\n\t\t\t\t// add class to pre\n\t\t\t\tmutateActions.push(function () {\n\t\t\t\t\tpre.classList.add(LINKABLE_LINE_NUMBERS_CLASS);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tvar start = parseInt(pre.getAttribute('data-start') || '1');\n\n\t\t\t// iterate all line number spans\n\t\t\t$$('.line-numbers-rows > span', pre).forEach(function (lineSpan, i) {\n\t\t\t\tvar lineNumber = i + start;\n\t\t\t\tlineSpan.onclick = function () {\n\t\t\t\t\tvar hash = id + '.' + lineNumber;\n\n\t\t\t\t\t// this will prevent scrolling since the span is obviously in view\n\t\t\t\t\tscrollIntoView = false;\n\t\t\t\t\tlocation.hash = hash;\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tscrollIntoView = true;\n\t\t\t\t\t}, 1);\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\treturn function () {\n\t\t\tmutateActions.forEach(callFunction);\n\t\t};\n\t}\n\n\tfunction applyHash() {\n\t\tvar hash = location.hash.slice(1);\n\n\t\t// Remove pre-existing temporary lines\n\t\t$$('.temporary.line-highlight').forEach(function (line) {\n\t\t\tline.parentNode.removeChild(line);\n\t\t});\n\n\t\tvar range = (hash.match(/\\.([\\d,-]+)$/) || [, ''])[1];\n\n\t\tif (!range || document.getElementById(hash)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar id = hash.slice(0, hash.lastIndexOf('.'));\n\t\tvar pre = document.getElementById(id);\n\n\t\tif (!pre) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!pre.hasAttribute('data-line')) {\n\t\t\tpre.setAttribute('data-line', '');\n\t\t}\n\n\t\tvar mutateDom = highlightLines(pre, range, 'temporary ');\n\t\tmutateDom();\n\n\t\tif (scrollIntoView) {\n\t\t\tdocument.querySelector('.temporary.line-highlight').scrollIntoView();\n\t\t}\n\t}\n\n\tvar fakeTimer = 0; // Hack to limit the number of times applyHash() runs\n\n\tPrism.hooks.add('before-sanity-check', function (env) {\n\t\tvar pre = env.element.parentElement;\n\t\tif (!isActiveFor(pre)) {\n\t\t\treturn;\n\t\t}\n\n\t\t/*\n\t\t * Cleanup for other plugins (e.g. autoloader).\n\t\t *\n\t\t * Sometimes <code> blocks are highlighted multiple times. It is necessary\n\t\t * to cleanup any left-over tags, because the whitespace inside of the <div>\n\t\t * tags change the content of the <code> tag.\n\t\t */\n\t\tvar num = 0;\n\t\t$$('.line-highlight', pre).forEach(function (line) {\n\t\t\tnum += line.textContent.length;\n\t\t\tline.parentNode.removeChild(line);\n\t\t});\n\t\t// Remove extra whitespace\n\t\tif (num && /^(?: \\n)+$/.test(env.code.slice(-num))) {\n\t\t\tenv.code = env.code.slice(0, -num);\n\t\t}\n\t});\n\n\tPrism.hooks.add('complete', function completeHook(env) {\n\t\tvar pre = env.element.parentElement;\n\t\tif (!isActiveFor(pre)) {\n\t\t\treturn;\n\t\t}\n\n\t\tclearTimeout(fakeTimer);\n\n\t\tvar hasLineNumbers = Prism.plugins.lineNumbers;\n\t\tvar isLineNumbersLoaded = env.plugins && env.plugins.lineNumbers;\n\n\t\tif (hasClass(pre, LINE_NUMBERS_CLASS) && hasLineNumbers && !isLineNumbersLoaded) {\n\t\t\tPrism.hooks.add('line-numbers', completeHook);\n\t\t} else {\n\t\t\tvar mutateDom = highlightLines(pre);\n\t\t\tmutateDom();\n\t\t\tfakeTimer = setTimeout(applyHash, 1);\n\t\t}\n\t});\n\n\twindow.addEventListener('hashchange', applyHash);\n\twindow.addEventListener('resize', function () {\n\t\tvar actions = $$('pre')\n\t\t\t.filter(isActiveFor)\n\t\t\t.map(function (pre) {\n\t\t\t\treturn highlightLines(pre);\n\t\t\t});\n\t\tactions.forEach(callFunction);\n\t});\n\n}());\n","import React from \"react\"\r\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\r\n// eslint-disable-next-line\r\nimport prism from \"prismjs\"\r\nclass BasicUsage extends React.Component {\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Basic Usage</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <p>First You will need to import prism.</p>\r\n          <p>\r\n            Prism does its best to encourage good authoring practices.\r\n            Therefore, it only works with\r\n            <code>&ltcode&gt</code>elements, since marking up code without a{\" \"}\r\n            <code>&ltcode&gt </code>element is semantically invalid.\r\n            <a\r\n              href=\"http://www.w3.org/TR/html5/text-level-semantics.html#the-code-element\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              According to the HTML5 spec\r\n            </a>\r\n            , the recommended way to define a code language is a{\" \"}\r\n            <code>language-xxxx</code>class, which is what Prism uses. To make\r\n            things easier however, Prism assumes that this language definition\r\n            is inherited. Therefore, if multiple <code>&ltcode&gt </code>\r\n            elements have the same language, you can add the\r\n            <code>language-xxxx</code>class on one of their common ancestors.\r\n            This way, you can also define a document-wide default language, by\r\n            adding a <code>language-xxxx</code>class on the\r\n            <code>&ltbody&gt </code>or <code>&lthtml&gt</code>element.{\" \"}\r\n          </p>\r\n          <p>\r\n            If you want to opt-out of highlighting for a{\" \"}\r\n            <code>&ltcode&gt</code>\r\n            element that is a descendant of an element with a declared code\r\n            language, you can add the class <code>language-none</code>to it (or\r\n            any non-existing language, really).\r\n          </p>\r\n          <p>\r\n            The{\" \"}\r\n            <a\r\n              href=\"https://www.w3.org/TR/html5/grouping-content.html#the-pre-element\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              recommended way to mark up a code block\r\n            </a>\r\n            (both for semantics and for Prism) is a <code>&ltpre&gt</code>\r\n            element with a <code>&ltcode&gt</code>element inside, like so:\r\n          </p>\r\n          <p>code:</p>\r\n          <pre>\r\n            <code className=\"language-markup\">\r\n              {`\r\n<pre>\r\n  <code class=\"language-css\">\r\n    p {\r\n        color: red\r\n      }\r\n  </code>\r\n</pre>\r\n  `}\r\n            </code>\r\n          </pre>\r\n          <p className=\"my-1\">Output</p>\r\n          <pre>\r\n            <code className=\"language-css\">\r\n              {`\r\np {\r\n  color: red\r\n}\r\n                `}\r\n            </code>\r\n          </pre>\r\n          <p className=\"mt-1\">\r\n            If you use that pattern, the <code>&ltpre&gt</code>will\r\n            automatically get the <code>language-xxxx</code>class (if it doesn't\r\n            already have it) and will be styled as a code block.\r\n          </p>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default BasicUsage\r\n","import React from 'react'\r\nimport { Card, CardHeader, CardTitle, CardBody } from 'reactstrap'\r\n// eslint-disable-next-line\r\nimport prism from \"prismjs\"\r\n\r\n\r\n\r\nclass Examples extends React.Component {\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Examples</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <h5 className=\"font-weight-600\">HTML Markup</h5>\r\n          <p>Use the following code to use HTML syntax highlighter.</p>\r\n          <p>Usage:</p>\r\n          <pre>\r\n            <code className=\"language-markup\">\r\n              {`\r\n<pre>\r\n  <code class=\"language-html\">\r\n    HTML CODE ...\r\n  </code>\r\n</pre>\r\n            `}\r\n            </code>\r\n          </pre>\r\n          <p className=\"my-1\">Output:</p>\r\n          <pre>\r\n            <code className=\"language-markup\">\r\n              {`\r\n<Media>\r\n  <Media left href=\"#\">\r\n    <Media object data-src=\"holder.js/64x64\" alt=\"Generic placeholder image\" />\r\n  </Media>\r\n  <Media body>\r\n    <Media heading>\r\n      Media heading\r\n    </Media>\r\n    Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo.\r\n  </Media>\r\n</Media>\r\n\r\n      `}\r\n            </code>\r\n          </pre>\r\n\r\n          <h5 className=\"font-weight-600 mt-2\">CSS Markup</h5>\r\n          <p>Use the following code to use CSS syntax highlighter.</p>\r\n          <p>Usage:</p>\r\n          <pre>\r\n            <code className=\"language-markup\">\r\n              {`\r\n<pre>\r\n  <code class=\"language-css\">\r\n    CSS CODE ...\r\n  </code>\r\n</pre>\r\n            `}\r\n            </code>\r\n          </pre>\r\n          <p className=\"my-1\">Output:</p>\r\n          <pre>\r\n            <code className=\"language-css\">\r\n              {`\r\na:active {\r\n  outline: 0\r\n}\r\n\r\na:hover {\r\n  outline: 0\r\n}\r\n\r\nabbr[title] {\r\n  border-bottom: 1px dotted\r\n}\r\n\r\nb, strong {\r\n  font-weight: bold\r\n}\r\n\r\ndfn {\r\n  font-style: italic\r\n}\r\n\r\nh1 {\r\n  font-size: 2em\r\n  margin: 0.67em 0\r\n}\r\n          `}\r\n            </code>\r\n          </pre>\r\n\r\n          <h5 className=\"font-weight-600 mt-2\">JS Markup</h5>\r\n          <p>Use the following code to use JS syntax highlighter.</p>\r\n          <p>Usage:</p>\r\n          <pre>\r\n            <code className=\"language-markup\">\r\n              {`\r\n<pre>\r\n  <code class=\"language-js\">\r\n    JS CODE ...\r\n  </code>\r\n</pre>\r\n            `}\r\n            </code>\r\n          </pre>\r\n          <p className=\"my-1\">Output:</p>\r\n          <pre>\r\n            <code className=\"language-javascript\">\r\n              {`\r\ncomponentDidMount() {\r\n  this.setState({\r\n    item : true\r\n  })\r\n}\r\n              `}\r\n            </code>\r\n          </pre>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default Examples\r\n","import React from \"react\"\r\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\r\n/*eslint-disable */\r\n\r\nimport prism from \"prismjs\"\r\nimport LineNumbers from \"prismjs/plugins/line-numbers/prism-line-numbers\"\r\nimport \"prismjs/plugins/line-numbers/prism-line-numbers.css\"\r\n\r\n/*eslint-enable */\r\n\r\nclass LineNumber extends React.Component {\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Line Numbers</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <p>Line number at the beginning of code lines.</p>\r\n          <p>\r\n            Obviously, this is supposed to work only for code blocks (\r\n            <code>&ltpre&gt &ltcode&gt</code>) and not for inline code. Add\r\n            class line-numbers to your desired <code>&ltpre&gt</code> and\r\n            line-numbers plugin will take care.\r\n          </p>\r\n          <p>\r\n            Optional: You can specify the data-start (Number) attribute on the{\" \"}\r\n            <code>&ltpre&gt</code> element. It will shift the line counter.\r\n          </p>\r\n\r\n          <p>usage:</p>\r\n          <pre>\r\n            <code className=\"language-markup\">\r\n              {`\r\n<pre class=\"line-numbers\">\r\n  <code class=\"language-javascript\">\r\n   Code here...\r\n  </code>\r\n</pre>\r\n    `}\r\n            </code>\r\n          </pre>\r\n          <p className=\"my-1\">Output:</p>\r\n          <pre className=\"line-numbers\">\r\n            <code className=\"language-javascript\">\r\n              {` componentDidMount = () => {\r\n    if (typeof self==='undefined' || !self.Prism || !self.document) {\r\n      return\r\n    }\r\n  }`}\r\n            </code>\r\n          </pre>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default LineNumber\r\n","import React from \"react\"\r\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\r\n/*eslint-disable */\r\nimport prism from \"prismjs\"\r\nimport LineHighlighter from \"prismjs/plugins/line-highlight/prism-line-highlight\"\r\nimport \"prismjs/plugins/line-highlight/prism-line-highlight.css\"\r\n/*eslint-enable */\r\n\r\nclass LineHighlight extends React.Component {\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Line Highlight</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <p>Highlights specific lines and/or line ranges.</p>\r\n          <p>\r\n            You specify the lines to be highlighted through the{\" \"}\r\n            <em>data-line</em> attribute on the\r\n            <code>&ltpre&gt </code> element, in the following simple format:\r\n          </p>\r\n          <ul>\r\n            <li>A single number refers to the line with that number</li>\r\n            <li>\r\n              Ranges are denoted by two numbers, separated with a hyphen (-)\r\n            </li>\r\n            <li>Multiple line numbers or ranges are separated by commas.</li>\r\n            <li>Whitespace is allowed anywhere and will be stripped off.</li>\r\n          </ul>\r\n          <p>Usage:</p>\r\n          <pre>\r\n            <code className=\"language-markup\">{`\r\n<pre data-line=\"2, 4, 8-10\">\r\n  <code class=\"language-css\">\r\n    Your Code\r\n  </code>\r\n</pre>\r\n            `}</code>\r\n          </pre>\r\n          <p className=\"my-1\">Output:</p>\r\n          <pre data-line=\"2, 4, 8-10\">\r\n            <code className=\"language-css\">\r\n              {`\r\npre.line-numbers {\r\n  position: relative\r\n  padding-left: 3.8em\r\n  counter-reset: linenumber\r\n}\r\n\r\npre.line-numbers > code {\r\n  position: relative\r\n}\r\n  `}\r\n            </code>\r\n          </pre>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default LineHighlight\r\n","import React from \"react\"\r\nimport { Row, Col } from \"reactstrap\"\r\nimport Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\"\r\nimport BasicUsage from \"./BasicUsage\"\r\nimport Examples from \"./Examples\"\r\nimport LineNumbers from \"./LineNumbers\"\r\nimport LineHighlight from \"./LineHightlight\"\r\nimport Prism from \"prismjs\"\r\nclass SyntaxHighlighter extends React.Component {\r\n  componentDidMount() {\r\n    Prism.highlightAll()\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Breadcrumbs\r\n          breadCrumbTitle=\"Syntax Highlighter\"\r\n          breadCrumbParent=\"Content\"\r\n          breadCrumbActive=\"Syntax Highlighter\"\r\n        />\r\n        <Row>\r\n          <Col sm=\"12\">\r\n            <BasicUsage />\r\n          </Col>\r\n          <Col sm=\"12\">\r\n            <Examples />\r\n          </Col>\r\n          <Col sm=\"12\">\r\n            <LineNumbers />\r\n          </Col>\r\n          <Col sm=\"12\">\r\n            <LineHighlight />\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SyntaxHighlighter\r\n"],"sourceRoot":""}