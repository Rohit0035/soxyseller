{"version":3,"sources":["views/forms/formik/FormikBasic.js","views/forms/formik/FormikErrorMsg.js","views/forms/formik/FormikValidation.js","views/forms/formik/Formik.js"],"names":["FormikBasic","Card","CardHeader","CardTitle","CardBody","initialValues","firstName","lastName","email","onSubmit","values","setTimeout","toast","success","JSON","stringify","render","FormGroup","htmlFor","className","name","placeholder","type","Button","Ripple","color","React","Component","SignUpSchema","Yup","shape","required","min","max","FormikErrorMsg","validationSchema","errors","touched","component","msg","formSchema","number","url","date","minlength","maxlength","FormValidation","Label","for","id","Formik","Fragment","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Row","Col","lg","md","sm","FormikValidation"],"mappings":"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","file":"static/js/267.c4ae8fea.chunk.js","sourcesContent":["import React from \"react\"\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardBody,\r\n  Button,\r\n  FormGroup\r\n} from \"reactstrap\"\r\nimport { Formik, Field, Form } from \"formik\"\r\nimport { ToastContainer, toast } from \"react-toastify\"\r\nimport \"react-toastify/dist/ReactToastify.css\"\r\n\r\nclass FormikBasic extends React.Component {\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Basic</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <p>\r\n            Getting values in and out of form state is easy using formik, you\r\n            won't have to manage state to make your input a controlled element.\r\n          </p>\r\n          <Formik\r\n            initialValues={{\r\n              firstName: \"\",\r\n              lastName: \"\",\r\n              email: \"\"\r\n            }}\r\n            onSubmit={values => {\r\n              setTimeout(() => {\r\n                toast.success(JSON.stringify(values, null, 2))\r\n              }, 500)\r\n            }}\r\n            render={() => (\r\n              <Form>\r\n                <FormGroup>\r\n                  <label htmlFor=\"firstName\">First Name</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"firstName\"\r\n                    placeholder=\"Jane\"\r\n                  />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                  <label htmlFor=\"lastName\">Last Name</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"lastName\"\r\n                    placeholder=\"Doe\"\r\n                  />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                  <label htmlFor=\"email\">Email</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"email\"\r\n                    placeholder=\"jane@acme.com\"\r\n                    type=\"email\"\r\n                  />\r\n                </FormGroup>\r\n                <Button.Ripple color=\"primary\" type=\"submit\">\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Form>\r\n            )}\r\n          />\r\n          <ToastContainer />\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default FormikBasic\r\n","import React from \"react\"\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardBody,\r\n  Button,\r\n  FormGroup\r\n} from \"reactstrap\"\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\"\r\nimport * as Yup from \"yup\"\r\n\r\nconst SignUpSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email(\"Invalid email address\")\r\n    .required(\"Required\"),\r\n  firstName: Yup.string()\r\n    .min(2, \"Must be longer than 2 characters\")\r\n    .max(20, \"Nice try, nobody has a first name that long\")\r\n    .required(\"Required\"),\r\n  lastName: Yup.string()\r\n    .min(2, \"Must be longer than 2 characters\")\r\n    .max(20, \"Nice try, nobody has a last name that long\")\r\n    .required(\"Required\")\r\n})\r\n\r\nclass FormikErrorMsg extends React.Component {\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Error Msg</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <p>\r\n            You can show error messages with formik using{\" \"}\r\n            <code>validationSchema</code> prop with formik tag.\r\n          </p>\r\n          <Formik\r\n            initialValues={{\r\n              email: \"\",\r\n              firstName: \"\",\r\n              lastName: \"\"\r\n            }}\r\n            validationSchema={SignUpSchema}\r\n            render={({ errors, touched }) => (\r\n              <Form>\r\n                <FormGroup>\r\n                  <label htmlFor=\"firstName\">First Name</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"firstName\"\r\n                    placeholder=\"Jane\"\r\n                    type=\"text\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"firstName\"\r\n                    component=\"div\"\r\n                    className=\"field-error text-danger\"\r\n                  />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                  <label htmlFor=\"lastName\">Last Name</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"lastName\"\r\n                    placeholder=\"Doe\"\r\n                    type=\"text\"\r\n                  />\r\n                  <ErrorMessage name=\"firstName\">\r\n                    {(msg /** this is the same as the above */) => (\r\n                      <div className=\"field-error text-danger\">{msg}</div>\r\n                    )}\r\n                  </ErrorMessage>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                  <label htmlFor=\"email\">Email</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"email\"\r\n                    placeholder=\"jane@acme.com\"\r\n                    type=\"email\"\r\n                  />\r\n                  {/* This will render a string */}\r\n                  <ErrorMessage name=\"email\">\r\n                    {(msg /** this is the same as the above */) => (\r\n                      <div className=\"field-error text-danger\">{msg}</div>\r\n                    )}\r\n                  </ErrorMessage>\r\n                </FormGroup>\r\n\r\n                <Button.Ripple color=\"primary\" className=\"mt-1\" type=\"submit\">\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Form>\r\n            )}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default FormikErrorMsg\r\n","import React from \"react\"\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardBody,\r\n  FormGroup,\r\n  Button,\r\n  Label\r\n} from \"reactstrap\"\r\nimport { Formik, Field, Form } from \"formik\"\r\nimport * as Yup from \"yup\"\r\n\r\nconst formSchema = Yup.object().shape({\r\n  required: Yup.string().required(\"Required\"),\r\n  email: Yup.string()\r\n    .email(\"Invalid email\")\r\n    .required(\"Required\"),\r\n  number: Yup.number().required(\"Required\"),\r\n  url: Yup.string()\r\n    .url()\r\n    .required(\"Required\"),\r\n  date: Yup.date().required(\"Required\"),\r\n  minlength: Yup.string()\r\n    .min(4, \"Too Short!\")\r\n    .required(\"Required\"),\r\n  maxlength: Yup.string()\r\n    .max(5, \"Too Long!\")\r\n    .required(\"Required\")\r\n})\r\n\r\nclass FormValidation extends React.Component {\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle> Validation</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Formik\r\n            initialValues={{\r\n              required: \"\",\r\n              email: \"\",\r\n              url: \"\",\r\n              number: \"\",\r\n              date: \"\",\r\n              minlength: \"\",\r\n              maxlength: \"\"\r\n            }}\r\n            validationSchema={formSchema}\r\n          >\r\n            {({ errors, touched }) => (\r\n              <Form>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"required\">Name</Label>\r\n                  <Field\r\n                    name=\"required\"\r\n                    id=\"required\"\r\n                    className={`form-control ${errors.required &&\r\n                      touched.required &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.required && touched.required ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.required}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"email\">Email</Label>\r\n                  <Field\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    id=\"email\"\r\n                    className={`form-control ${errors.email &&\r\n                      touched.email &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.email && touched.email ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.email}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"url\">Website URL</Label>\r\n                  <Field\r\n                    name=\"url\"\r\n                    id=\"url\"\r\n                    className={`form-control ${errors.url &&\r\n                      touched.url &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.url && touched.url ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.url}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"number\">Number</Label>\r\n                  <Field\r\n                    name=\"number\"\r\n                    id=\"number\"\r\n                    className={`form-control ${errors.number &&\r\n                      touched.number &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.number && touched.number ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.number}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"date\">Date</Label>\r\n                  <Field\r\n                    type=\"date\"\r\n                    name=\"date\"\r\n                    id=\"date\"\r\n                    className={`form-control ${errors.date &&\r\n                      touched.date &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.date && touched.date ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.date}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"minlength\">\r\n                    Min Length (Minimum 4 Characters)\r\n                  </Label>\r\n                  <Field\r\n                    name=\"minlength\"\r\n                    id=\"minlength\"\r\n                    className={`form-control ${errors.minlength &&\r\n                      touched.minlength &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.minlength && touched.minlength ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.minlength}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"maxlength\">\r\n                    Max Length (Maximum 5 Characters)\r\n                  </Label>\r\n                  <Field\r\n                    name=\"maxlength\"\r\n                    id=\"maxlength\"\r\n                    className={`form-control ${errors.maxlength &&\r\n                      touched.maxlength &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.maxlength && touched.maxlength ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.maxlength}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <Button.Ripple color=\"primary\" type=\"submit\">\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default FormValidation\r\n","import React from \"react\"\r\nimport { Row, Col } from \"reactstrap\"\r\nimport Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\"\r\nimport FormikBasic from \"./FormikBasic\"\r\nimport FormikErrorMsg from \"./FormikErrorMsg\"\r\nimport FormikValidation from \"./FormikValidation\"\r\n\r\nclass Formik extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Breadcrumbs\r\n          breadCrumbTitle=\"Formik\"\r\n          breadCrumbParent=\"Form\"\r\n          breadCrumbActive=\"Formik\"\r\n        />\r\n        <Row>\r\n          <Col lg=\"6\" md=\"12\">\r\n            <FormikBasic />\r\n          </Col>\r\n          <Col lg=\"6\" md=\"12\">\r\n            <FormikErrorMsg />\r\n          </Col>\r\n          <Col sm=\"12\">\r\n            <FormikValidation />\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default Formik\r\n"],"sourceRoot":""}